from sqlalchemy import create_engine, Column, Integer, String, Numeric, Boolean, ForeignKey
from sqlalchemy.orm import sessionmaker, DeclarativeBase, relationship

# üîπ –°–æ–∑–¥–∞—ë–º –¥–≤–∏–∂–æ–∫ SQLite –≤ –ø–∞–º—è—Ç–∏
engine = create_engine("sqlite:///:memory:", echo=False)

# üîπ –ë–∞–∑–æ–≤—ã–π –∫–ª–∞—Å—Å –¥–ª—è –¥–µ–∫–ª–∞—Ä–∞—Ç–∏–≤–Ω–æ–≥–æ –º–∞–ø–ø–∏–Ω–≥–∞
class Base(DeclarativeBase):
    pass

# üîπ –ú–æ–¥–µ–ª—å Category
class Category(Base):
    __tablename__ = "categories"
    id = Column(Integer, primary_key=True)
    name = Column(String(100), nullable=False)
    description = Column(String(255))
    products = relationship("Product", back_populates="category")

    def __repr__(self):
        return f"<Category(name='{self.name}')>"

# üîπ –ú–æ–¥–µ–ª—å Product
class Product(Base):
    __tablename__ = "products"
    id = Column(Integer, primary_key=True)
    name = Column(String(100), nullable=False)
    price = Column(Numeric(10, 2), nullable=False)
    in_stock = Column(Boolean, default=True)
    category_id = Column(Integer, ForeignKey("categories.id"), index=True)
    category = relationship("Category", back_populates="products")

    def __repr__(self):
        return f"<Product(name='{self.name}', price={self.price}, in_stock={self.in_stock})>"

# üîπ –°–æ–∑–¥–∞—ë–º —Ç–∞–±–ª–∏—Ü—ã
Base.metadata.create_all(engine)

# üîπ –°–æ–∑–¥–∞—ë–º —Å–µ—Å—Å–∏—é
Session = sessionmaker(bind=engine)
session = Session()

# --- –î–æ–±–∞–≤–ª—è–µ–º 5 –∫–∞—Ç–µ–≥–æ—Ä–∏–π –∏ –ø—Ä–æ–¥—É–∫—Ç—ã ---
categories = [
    Category(name="–≠–ª–µ–∫—Ç—Ä–æ–Ω–∏–∫–∞", description="–ì–∞–¥–∂–µ—Ç—ã –∏ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞"),
    Category(name="–ö–Ω–∏–≥–∏", description="–†–∞–∑–Ω—ã–µ –∂–∞–Ω—Ä—ã"),
    Category(name="–û–¥–µ–∂–¥–∞", description="–î–ª—è –º—É–∂—á–∏–Ω –∏ –∂–µ–Ω—â–∏–Ω"),
    Category(name="–ü—Ä–æ–¥—É–∫—Ç—ã –ø–∏—Ç–∞–Ω–∏—è", description="–ï–¥–∞ –∏ –Ω–∞–ø–∏—Ç–∫–∏"),
    Category(name="–°–ø–æ—Ä—Ç –∏ –æ—Ç–¥—ã—Ö", description="–°–ø–æ—Ä—Ç–∏–≤–Ω—ã–µ —Ç–æ–≤–∞—Ä—ã –∏ –æ—Ç–¥—ã—Ö")
]

products = [
    Product(name="–ù–æ—É—Ç–±—É–∫", price=75999.99, in_stock=True, category=categories[0]),
    Product(name="–°–º–∞—Ä—Ç—Ñ–æ–Ω", price=49999.50, in_stock=True, category=categories[0]),
    Product(name="–§—É—Ç–±–æ–ª–∫–∞", price=1200.00, in_stock=False, category=categories[2]),
    Product(name="–ö–Ω–∏–≥–∞ Python", price=1500.00, in_stock=True, category=categories[1]),
    Product(name="–ë–µ–≥–æ–≤—ã–µ –∫—Ä–æ—Å—Å–æ–≤–∫–∏", price=8500.00, in_stock=True, category=categories[4])
]

session.add_all(categories + products)
session.commit()

# --- –í—ã–≤–æ–¥ –ø—Ä–æ–¥—É–∫—Ç–æ–≤ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º ---
for c in session.query(Category).all():
    print(f"–ö–∞—Ç–µ–≥–æ—Ä–∏—è: {c.name} ({c.description})")
    if c.products:
        for p in c.products:
            status = "–î–∞" if p.in_stock else "–ù–µ—Ç"
            print(f"  - {p.name}, —Ü–µ–Ω–∞: {p.price} ‚ÇΩ, –≤ –Ω–∞–ª–∏—á–∏–∏: {status}")
    else:
        print("  (–ù–µ—Ç –ø—Ä–æ–¥—É–∫—Ç–æ–≤)")
    print()

# üîö –ó–∞–∫—Ä—ã–≤–∞–µ–º —Å–µ—Å—Å–∏—é
session.close()